# -*- coding: utf-8 -*-

import re
import time
from copy import deepcopy
import random

from config import (
     IsDebug, IsDeepDebug, IsTrace, IsPrintExceptions, IsWithPrintErrors, IsRandomScores, IsWithGroup,
     errorlog, print_to, print_exception,
    )

from app.settings import DEFAULT_LANGUAGE, DEFAULT_PARSE_MODE, NO_RESULTS, NO_KEY, RCODES
from app.dialogs.start import help
from app.handlers import *

from app import dbs

# Группировка результатов
_with_group = 0 # IsWithGroup
# Случайный порядок ответов
_is_random_scores = IsRandomScores

# --------------------------------------
# Тест на эмоциональное выгорание Маслач
# --------------------------------------

_TEST_NAME = 'T13'
_QCOUNT = 22

_QUESTIONS = {
    'ru': (
"""
1. Я ощущаю себя опустошённым/опустошённой.
""",
"""
2. В конце рабочего дня я ощущаю себя, как выжатый лимон.
""",
"""
3. Я ощущаю себя уставшим/уставшей, когда просыпаюсь с утра  должен/должна идти на работу.
""",
"""
4. Я хорошо понимаю, что ощущают мои коллеги, подопечные, пациенты, клиенты, и использую это для более эффективной работы.
""",
"""
5. Я общаюсь с моими подопечными, пациентами, клиентами только формально, без лишних эмоций, и стремлюсь свести время общения с ними до минимума.
""",
"""
6. Я ощущаю себе энергичным/энергичной, эмоционально приподнятым/приподнятой.
""",
"""
7. Я умею находить правильные решения в конфликтных ситуациях с подопечными, пациентами, клиентами и их родственниками.
""",
"""
8. Я ощущаю угнетённость и апатию.
""",
"""
9. Я могу положительно влиять на самочувствие и настроение своих подопечных, пациентов, клиентов.
""",
"""
10. В последнее время я стал(а) более чёрствым(ой) по отношению к своим подопечным, пациентам, клиентам.
""",
"""
11. Как правило, окружающие меня люди требуют от меня слишком многого.
""",
"""
12. У меня много планов на будущее, я верю в их реализацию.
""",
"""
13. Я чувствую всё больше разочарований.
""",
"""
14. Я ощущаю потерю интереса к вещам, которые раньше были мне приятными.
""",
"""
15. Бывает, что мне на самом деле всё равно, что может случиться с моими подопечными, пациентами, клиентами.
""",
"""
16. Я хочу остаться в одиночестве  отдохнуть от всего и от всех.
""",
"""
17. Я легко могу создать атмосферу доброжелательности и оптимизма в отношениях с моими коллегами и отношениями с моими подопечными, пациентами, клиентами.
""",
"""
18. Я легко общаюсь с пациентами и клиентами и их родственниками независимо от их социального статуса и характера.
""",
"""
19. Я многое успеваю сделать за день.
""",
"""
20. Я ощущаю себя на пределе своих возможностей.
""",
"""
21. Я ещё многого могу достичь в своей жизни.
""",
"""
22. Пациенты/клиенты, как правило, - неблагодарные люди.
""",
), 
    'uk': (
"""
1. Я відчуваю себе спустошеним/спустошеною.
""",
"""
2. Наприкінці робочого дня я відчуваю себе як вичавлений лимон.
""",
"""
3. Я відчуваю себе втомленим/втомленою, коли просинаюся зранку і маю йти на роботу.
""",
"""
4. Я добре розумію, що відчувають мої колеги, підопічні, пацієнти, клієнти, і використовую це для більш ефективної роботи.
""",
"""
5. Я спілкуюся із моїми підопічними, пацієнтами, клієнтами тільки формально, без зайвих емоцій, і прагну звести час спілкування з ними до мінімуму.
""",
"""
6. Я відчуваю себе енергійним/енергійною, емоційно піднесеним/піднесеною.
""",
"""
7. Я вмію знаходити правильні рішення в конфліктних ситуаціях з підопічними, пацієнтами, клієнтами та їх родичами.
""",
"""
8. Я відчуваю пригніченість і апатію.
""",
"""
9. Я можу позитивно впливати на самопочуття та настрій своїх підопічних, пацієнтів, клієнтів.
""",
"""
10. Останнім часом я став/стала більш черствим/черствою щодо своїх підопічних, пацієнтів, клієнтів.
""",
"""
11. Як правило, ті, хто мене оточує, забагато від мене потребують.
""",
"""
12. У мене багато планів на майбутнє, я вірю в їх реалізацію.
""",
"""
13. Я відчуваю все більше розчарувань.
""",
"""
14. Я відчуваю втрату зацікавлення до речей, які раніше мені були приємними.
""",
"""
15. Буває, що мені дійсно байдуже до того, що може трапитися із моїми підопічними, пацієнтами, клієнтами.
""",
"""
16. Я бажаю залишитися на самоті й відпочити від усього та від усіх.
""",
"""
17. Я легко можу створити атмосферу доброзичливості і оптимізму у стосунках із моїми колегами та стосунках із моїми підопічними, пацієнтами, клієнтами.
""",
"""
18. Я легко спілкуюся із пацієнтами, клієнтами та їх родичами незалежно від їх соціального статусу і характеру.
""",
"""
19. Я багато встигаю зробити за день.
""",
"""
20. Я відчуваю себе на межі своїх можливостей.
""",
"""
21. Я ще багато чого зможу досягти у власному житті.
""",
"""
22. Пацієнти, клієнти, як правило, - невдячні люди.
""",
),
}

_scores_numbers = 'ABCDEFG'

_SCORES = {
    'ru': [
        ( 0, 'Никогда',),
        ( 1, 'Очень редко',),
        ( 2, 'Редко',),
        ( 3, 'Иногда',),
        ( 4, 'Часто',),
        ( 5, 'Очень часто',),
        ( 6, 'Всегда',),
    ],
    'uk': [
        ( 0, 'Ніколи',),
        ( 1, 'Дуже рідко',),
        ( 2, 'Рідко',),
        ( 3, 'Іноді',),
        ( 4, 'Часто',),
        ( 5, 'Дуже часто',),
        ( 6, 'Завжди',),
    ],
}

_PARAMS = {
    'ru': {
        '01' : ('Эмоциональное истощение', (1, 2, 3, 6, 8, 13, 14, 16, 20)),
        '02' : ('Деперсонализация', (5, 10, 11, 15, 22)),
        '03' : ('Редукция личных достижений', (4, 7, 9, 12, 17, 18, 19, 21)),
    },
    'uk': {
        '01' : ('Емоційне виснаження', (1, 2, 3, 6, 8, 13, 14, 16, 20)),
        '02' : ('Деперсоналізація', (5, 10, 11, 15, 22)),
        '03' : ('Редукція особистих досягнень', (4, 7, 9, 12, 17, 18, 19, 21)),
    },
}

_RESULTS = {
    'ru' : {
        '01' : [
            (10, 'Крайне низкое значение психоэмоционального истощения'), 
            (20, 'Низкое значение психоэмоционального истощения'), 
            (30, 'Среднее значение психоэмоционального истощения'), 
            (40, 'Высокое значение психоэмоционального истощения'), 
            (54, 'Крайне высокое значение психоэмоционального истощения'),
        ],
        '02' : [
            (5, 'Крайне низкое значение деперсонализации (личностного отдаления)'), 
            (11, 'Низкое значение деперсонализации (личностного отдаления)'), 
            (17, 'Среднее значение деперсонализации (личностного отдаления)'), 
            (23, 'Высокое значение деперсонализации (личностного отдаления)'), 
            (30, 'Крайне высокое значение деперсонализации (личностного отдаления)'),
        ],
        '03' : [
            (8, 'Крайне высокое значение редукции личных достижений (профессиональной мотивации)'), 
            (18, 'Высокое значение редукции личных достижений (профессиональной мотивации)'), 
            (28, 'Среднее значение редукции личных достижений (профессиональной мотивации)'), 
            (38, 'Низкое значение редукции личных достижений (профессиональной мотивации)'), 
            (48, 'Крайне низкое значение редукции личных достижений (профессиональной мотивации)'),
        ],
    },
    'uk' : {
        '01' : [(10, 'Вкрай низьке значення психоемоційного виснаження'), (20, 'Низьке значення психоемоційного виснаження'), (30, 'Середнє значення психоемоційного виснаження'), (40, 'Високе значення психоемоційного виснаження'), (54, 'Вкрай високе значення психоемоційного виснаження'),],
        '02' : [(5, 'Вкрай низьке значення деперсоналізації (особистісної віддаленості'), (11, 'Низьке значення деперсоналізації (особистісної віддаленості)'), (17, 'Середнє значення деперсоналізації (особистісної віддаленості)'), (23, 'Високе значення деперсоналізації (особистісної віддаленості)'), (30, 'Виявлено вкрай високе значення деперсоналізації (особистісної віддаленості)'),],
        '03' : [(8, 'Вкрай високе значення психоемоційного виснаження'), (18, 'Високе значення психоемоційного виснаження'), (28, 'Середнє значення психоемоційного виснаження'), (38, 'Низьке значення психоемоційного виснаження'), (48, 'Вкрай низьке значення психоемоційного виснаження'),],
    },
}

_CONCLUSIONS = {
    'ru' : (
        (23, 'Обнаружено крайне низкое значение психического выгорания'), 
        (49, 'Обнаружено низкое значение психического выгорания'), 
        (75, 'Обнаружено среднее значение психического выгорания'), 
        (101, 'Обнаружено высокое значение психического выгорания'), 
        (132, 'Обнаружено крайне высокое значение психического выгорания'), 
    ),
    'uk' : (
        (23, 'Виявлено вкрай низьке значення психічного вигорання'), 
        (49, 'Виявлено низьке значення психічного вигорання'), 
        (75, 'Виявлено середнє значення психічного вигорання'), 
        (101, 'Виявлено високе значення психічного вигорання'), 
        (132, 'Виявлено вкрай високе значення психічного вигорання'), 
    ),
}

_HEADERS = {
    'ru': 
"""
Ниже приведен список утверждений, характеризующих ощущения и переживания, которые могут возникать в связи с вашей работой. Прочитайте, пожалуйста, каждое утверждение и оцените, насколько оно отвечает вашим личным ощущениям.
""",
    'uk': 
"""
Нижче наведено список тверджень, який характеризує відчуття і переживання, що можуть виникати у зв’язку із вашою роботою. Прочитайте, будь-ласка, кожне твердження і оцініть, наскільки воно відповідає вашим особистим переживанням.
""",
}

_WARNINGS = {
    'ru': (
"""
Внимание, предоставленные данные выглядят недостоверными, рекомендуется быть более искренним в ответах или обратиться к специалисту!
""",
), 
    'uk': (
"""
Увага, надані відповіді видаються не надто достовірними; рекомендується бути більш щирим у відповідях або звернутися до фахівця!
""",
),
}

_FINISH = {
    'ru': (
"""
Завершение диалога.
""",
"""
Мы благодарим Вас за Ваши ответы.
Желаем Вам крепкого здоровья, и всего Вам доброго!
""",
), 
    'uk': (
"""
Завершення діалогу.
""",
"""
Ми дякуємо Вам за Ваші відповіді.
Бажаємо Вам міцного здоров'я, і всього Вам доброго!
""",
),
}

_results = {}


def test_name():
    return _TEST_NAME

def total_questions():
    return _QCOUNT

def get_question(i, lang, no_eof=None):
    x = _QUESTIONS[lang][i].strip()
    s = '%s.%s:' % (_TEST_NAME, x[-1] == '.' and x[:-1] or x)
    return no_eof and re.sub(r'\n', ' ', s) or s

def get_header(lang, no_eof=None):
    s = '<b>%s</b>' % _HEADERS[lang].strip()
    return no_eof and re.sub(r'\n', ' ', s) or s

def get_finish(storage, name, i, lang, no_eof=None):
    nic = storage.get(name, 'nic', with_decode=True)
    s = '%s%s' % (nic and '%s!\n\n' % nic or _FINISH[lang][0], _FINISH[lang][i].strip())
    return no_eof and re.sub(r'\n', ' ', s) or s

def get_answers(question, lang, no_eof=None):
    scores = list(_SCORES[lang])

    if _is_random_scores:
        random.shuffle(scores)

    answers = []
    buttons = []
    for i, x in enumerate(scores):
        b, s = x
        n = _scores_numbers[i]
        q = '%s.%s:%s' % (_TEST_NAME, question+1, b)
        answers.append('%s) %s' % (n, s))
        buttons.append((n, q))

    if _is_random_scores:
        buttons = sorted(buttons)

    return '\n'.join(answers), buttons

def get_result(storage, name, lang, mode=None):
    global _results

    res = ''
    data = storage.getall(name)
    params = _PARAMS[lang]
    scores = _SCORES[lang]
    results = _RESULTS[lang]
    conclusions = _CONCLUSIONS[lang]

    keys = sorted([x for x in params.keys() if x.isdigit()])

    cs, px = {}, {}

    for p in keys:
        # p: ключ параметра: 01,02...
        # name: наименование параметра
        x = 0
        name, sc = params[p]
        # sc: словарь ответов по каждой группе
        for n in sc:
            # n: номер вопроса
            key = ('%s.%s' % (_TEST_NAME, n)).encode()
            v = int(data.get(key, 0))
            x += v

        px[p] = x

        c = ''
        for i, item in enumerate(results[p]):
            # i: индекс результата
            # item: граничное значение параметра
            if x <= item[0]:
                # c: итоговая оценка по параметру
                c = item[1]
                if _with_group:
                    if i not in cs:
                        cs[i] = []
                    cs[i].append(p)
                break

        _results[p] = (x, c)

        # res: текст результата (параметры)
        if not _with_group:
            res += '%s. %s: [%s] <b>%s</b>\n' % (p, name, x, c)

    if _with_group:
        for i in cs:
            res += '<b>%s:</b>\n' % results[i][1]
            for p in cs[i]:
                res += '    %s: [%s] %s\n' % (p, px[p], params[p])

    res += ' * '*3+'\n'

    x = sum([_results[p][0] for p in keys])

    c = ''
    for i, item in enumerate(conclusions):
        # item: граничное значение параметра
        if x <= item[0]:
            # c: итоговая оценка по параметру
            c = item[1]
            break

    _results['F1'] = (x, c)

    # res: текст результата
    res += '[%s] <b>%s</b>\n' % (x, c)

    return res.strip()

def answer(bot, message, command, data=None, logger=None, question=None, **kw):
    """
        Make the step's answer
    """
    lang = kw.get('lang') or DEFAULT_LANGUAGE
    storage = kw.get('storage')
    name = kw.get('name')

    is_run = True

    if question == 0:
        text = get_header(lang)
        bot.send_message(message.chat.id, text, parse_mode=DEFAULT_PARSE_MODE)

    if question == _QCOUNT or (IsDebug and question > 0 and question%10 == 0):
        text = get_result(storage, name, lang)
        bot.send_message(message.chat.id, text, parse_mode=DEFAULT_PARSE_MODE)
        is_run = question < _QCOUNT

        if is_run:
            time.sleep(3)

    if is_run:
        answers, buttons = get_answers(question, lang)
        text = '%s\n\n%s' % (get_question(question, lang), answers)
        send_inline_keyboard(bot, message, buttons, text)

    elif 'query_id' in kw:
        _test_name = test_name()

        dbs.drop_before(_test_name, **kw)
        dbs.save_params(_test_name, _PARAMS, _results, **kw)
        """
        for p in sorted([x for x in _RESULTS[lang].keys()]):
            if p in _results:
                param = _PARAMS[lang][p][0]
                value, s1 = _results[p]
                storage.set(name, '%s.RP%s' % (_TEST_NAME, p), value)
                storage.set(name, '%s.TP%s' % (_TEST_NAME, p), '<i>%s</i>. %s:%s' % (param, s1, value), with_encode=True)
        """

        #storage.set(name, '%s.%s%s' % (_TEST_NAME, RCODES['TC'], 'F1'), _results['F1'])
        dbs.save(_test_name, '%s%s' % (RCODES['TC'], 'F1'), _results['F1'], **kw) # XXX conclusion ?

        if kw['query_id']:
            bot.answer_callback_query(
                kw['query_id'],
                text=get_finish(storage, name, 1, lang),
                show_alert=True
                )
    
            time.sleep(3)

        help(bot, message, logger=logger, mode=1, **kw)

## -------------------------- ##


def lines1(text):
    #
    # Ответы разные
    #
    numbers = _scores_numbers
    scores = {}
    qtext = "\nОберіть варіант відповіді:\n"
    n = 0
    i = 0
    for line in text.split('\n'):
        if not line:
            continue
        x = line.split('.')
        if len(x) > 1 and x[0].isdigit():
            n = int(x[0])
            q = x[1].strip()
            print('""",\n"""\n%s. %s.%s' % (n, q, qtext))
            i = 0
            scores[n] = []
            continue
        m = re.match(r'(- )(.*)(\(\d+\))', line)
        if not m:
            continue
        b = int(re.sub(r'[\(\)]', r'', m.group(3)))
        s = m.group(2).strip()
        scores[n].append(b)
        print("%s) %s%s" % (numbers[i], s, i < 3 and ',' or '.'))
        i += 1

def lines2(text):
    #
    # Ответы одинаковые
    #
    numbers = _scores_numbers
    scores = []
    qtext = "\nОберіть варіант відповіді:\n"
    n = 0
    i = 0
    for line in text.split('\n'):
        if not line:
            continue
        x = line.split('.')
        if len(x) > 1 and x[0].isdigit():
            n = int(x[0])
            q = x[1].strip()
            print('""",\n"""\n%s. %s.' % (n, q))
            i = 0
            continue
        if n == 1:
            m = re.match(r'(- )(.*)(\(\d+\))', line)
            if not m:
                continue
            b = int(re.sub(r'[\(\)]', r'', m.group(3)))
            s = m.group(2).strip()
            scores.append((s, b))
            i += 1
    for i, x in enumerate(scores):
        s, b = x
        print("%s(%s, '%s',)," % (' '*8, b, s))

def check(data, key, res):
    s = 0
    for k in data[key].keys():
        #print(k)
        q = k.split('.')[1]
        if not q.isdigit():
            continue
        #print(q)
        if int(q) in res:
            s += int(data[key][k])
    return s

def selftest(data, lang, with_print=None):
    key = _TEST_NAME
    params = _PARAMS[lang]

    out = ''
    r = 0
    for k in sorted(params.keys()):
        x = check(data, key, params[k][1])
        if with_print:
            print(x)
        r += x

    rp = '%s.RF' % key
    if rp in data[key]:
        x = int(data[key].get(rp, '0'))
        if r == x:
            out = 'OK'
        else:
            out = 'Error %s [%s:%s]' % (rp, r, x)
            if with_print or IsWithPrintErrors:
                print(key, out)

    return out or NO_RESULTS

