# -*- coding: utf-8 -*-

import re
import time
from copy import deepcopy
import random

from config import (
     IsDebug, IsDeepDebug, IsTrace, IsPrintExceptions, IsWithPrintErrors, IsWithGroup, IsWithExtra,
     errorlog, print_to, print_exception,
    )

from app.settings import DEFAULT_LANGUAGE, DEFAULT_PARSE_MODE, NO_RESULTS, NO_KEY, RCODES
from app.dialogs.start import help
from app.handlers import *

from app import dbs

# Группировка результатов
_with_group = 0 #IsWithGroup
# Ответ "Не знаю"
_with_extra = IsWithExtra

# Финальный результат теста
_is_without_conclusions = 1

# -----------------------------
# Тест на агрессивность Почебут
# -----------------------------

_TEST_NAME = 'T17'
_QCOUNT = 40
_QCOUNT_EXT = 191

_QUESTIONS = {
    'ru': (
"""
1. Во время спора я часто повышаю голос
""",
"""
2. Если меня кто-то раздражает, я могу сказать ему всё, что о нём думаю
""",
"""
3. Если мне необходимо будет прибегнуть к физической силе для защиты своих прав, я, не раздумывая, сделаю это
""",
"""
4. Когда я встречаю неприятного мне человека, я могу позволить себе незаметно ущипнуть или толкнуть его
""",
"""
5. Увлёкшись спором с другим человеком, я могу стукнуть кулаком по столу, чтобы привлечь к себе внимание или доказать свою правоту
""",
"""
6. Я постоянно чувствую, что другие не уважают мои права
""",
"""
7. Вспоминая прошлое, порой мне бывает обидно за себя
""",
"""
8. Хотя я и не подаю вида, иногда меня гложет зависть
""",
"""
9. Если я не одобряю поведение своих знакомых, то я прямо говорю им об этом
""",
"""
10. В сильном гневе я употребляю крепкие выражения, сквернословлю
""",
"""
11. Если кто-нибудь поднимет на меня руку, я постараюсь ударить его первым
""",
"""
12. Я бываю настолько взбешён, что швыряю разные предметы
""",
"""
13. У меня часто возникает потребность переставить в квартире мебель или полностью сменить её
""",
"""
14. В общении с людьми я часто чувствую себя «пороховой бочкой», которая постоянно готова взорваться
""",
"""
15. Порой у меня появляется желание зло пошутить над другим человеком
""",
"""
16. Когда я сердит, то обычно мрачнею
""",
"""
17. В разговоре с человеком я стараюсь его внимательно выслушать, не перебивая
""",
"""
18. В молодости у меня часто «чесались кулаки» и я всегда был готов пустить их в ход
""",
"""
19. Если я знаю, что человек намеренно меня толкнул, то дело может дойти до драки
""",
"""
20. Творческий беспорядок на моём рабочем столе позволяет мне эффективно работать
""",
"""
21. Я помню, что бывал настолько сердитым, что хватал всё, что попадало под руку, и ломал
""",
"""
22. Иногда люди раздражают меня только одним своим присутствием
""",
"""
23. Я часто удивляюсь, какие скрытые причины заставляют другого человека делать мне что-нибудь хорошее
""",
"""
24. Если мне нанесут обиду, у меня пропадает желание разговаривать с кем бы то ни было
""",
"""
25. Иногда я намеренно говорю гадости о человеке, которого не люблю
""",
"""
26. Когда я взбешён, я кричу самое злобное ругательство
""",
"""
27. В детстве я избегал драться
""",
"""
28. Я знаю, по какой причине и когда можно кого-нибудь ударить
""",
"""
29. Когда я взбешён, то могу хлопнуть дверью
""",
"""
30. Мне кажется, что окружающие люди меня не любят
""",
"""
31. Я постоянно делюсь с другими своими чувствами и переживаниями
""",
"""
32. Очень часто своими словами и действиями я сам себе приношу вред
""",
"""
33. Когда люди орут на меня, я отвечаю тем же
""",
"""
34. Если кто-нибудь ударит меня первым, я в ответ ударю его
""",
"""
35. Меня раздражает, когда предметы лежат не на своём месте
""",
"""
36. Если мне не удаётся починить сломавшийся или порвавшийся предмет, то я в гневе ломаю или рву его окончательно
""",
"""
37. Другие люди мне всегда кажутся преуспевающими
""",
"""
38. Когда я думаю об очень неприятном мне человеке, я могу прийти в возбуждение от желания причинить ему зло
""",
"""
39. Иногда мне кажется, что судьба сыграла со мной злую шутку
""",
"""
40. Если кто-нибудь обращается со мной не так, как следует, я очень расстраиваюсь по этому поводу
""",
), 
    'uk': (
"""
1. Під час суперечки я часто підвищую голос
""",
"""
2. Якщо мене хтось дратує, я можу сказати йому все, що про нього думаю
""",
"""
3. Якщо мені необхідно буде вдатися до фізичної сили для захисту своїх прав, я, не роздумуючи, зроблю це
""",
"""
4. Коли я зустрічаю неприємну мені людину, я можу дозволити собі непомітно вщипнути чи штовхнути її
""",
"""
5. Захопившись суперечкою з іншою людиною, я можу грюкнути кулаком по столу, аби привернути до себе увагу чи довести свою правоту
""",
"""
6. Я постійно відчуваю, що інші не поважають мої права
""",
"""
7. Згадуючи минуле, часом мені буває прикро за себе
""",
"""
8. Хоча я й не показую, іноді я відчуваю заздрість
""",
"""
9. Якщо я не схвалюю поведінку своїх знайомих, то прямо кажу їм про це
""",
"""
10. Сильно гніваючись, я використовую міцні вирази, лихословлю
""",
"""
11. Якщо хтось підніме на мене руку, я постараюся вдарити його першим
""",
"""
12. Я буваю настільки розлюченим, що кидаюся різними речами
""",
"""
13. У мене часто виникає потреба переставити в квартирі меблі чи повністю змінити її
""",
"""
14. У спілкуванні з людьми я часто відчуваю себе «пороховою діжкою», що постійно готова вибухнути
""",
"""
15. Часом у мене виникає бажання недобре пожартувати над іншою людиною
""",
"""
16. Коли я серджуся, то зазвичай стаю похмурим
""",
"""
17. У розмові з людиною я намагаюся його уважно вислухати, не перебиваючи
""",
"""
18. В молодості у мене часто «свербіли кулаки», і я завжди був готовий пустити їх у дію
""",
"""
19. Якщо я знаю, що людина навмисно мене штовхнула, то справа може дійти до бійки
""",
"""
20. Творчий безлад на моєму робочому столі дозволяє мені ефективно працювати
""",
"""
21. Я пам’ятаю, що бував настільки розлюченим, що хапав все, що попадало під руку, і ламав
""",
"""
22. Іноді люди дратують мене тільки однією своєю присутністю
""",
"""
23. Я часто дивуюся, які приховані причини змушують іншу людину робити мені щось добре
""",
"""
24. Якщо мене образять, у мене зникає бажання розмовляти з будь-ким
""",
"""
25. Іноді я навмисно розповідаю капості про людину, яка мені не подобається
""",
"""
26. Коли я розлючений, я викрикую найбільш злісну лайку
""",
"""
27. В дитинстві я уникав бійок
""",
"""
28. Я знаю, з якої нагоди і коли можна кого-небудь вдарити
""",
"""
29. Коли я розлючений, то можу грюкнути дверима
""",
"""
30. Мені здається, що оточуючі люди мене не люблять
""",
"""
31. Я постійно ділюся з іншими своїми почуттями і переживаннями
""",
"""
32. Дуже часто своїми словами і діями я сам собі приношу шкоду
""",
"""
33. Коли люди кричать на мене, я відповідаю тим самим
""",
"""
34. Якщо хтось вдарить мене першим, я у відповідь вдарю його
""",
"""
35. Мене дратує, коли речі лежать не на своєму місці
""",
"""
36. Якщо мені не вдається полагодити річ, що зламалася чи порвалася, то я у гніві ламаю чи рву її остаточно
""",
"""
37. Інші люди мені завжди здаються успішними
""",
"""
38. Коли я думаю про дуже неприємну мені людину, то можу збудитися від бажання заподіяти йому шкоду
""",
"""
39. Іноді мені здається, що доля зіграла зі мною злий жарт
""",
"""
40. Якщо хто-небудь чинить зі мною не так, як треба, я дуже засмучуюсь з цього приводу
""",
),
}

_ANSWERS = {
    'ru': [['Да', '%s.%s:1'], ['Нет', '%s.%s:-1']],
    'uk': [['Так', '%s.%s:1'], ['Ні', '%s.%s:-1']],
}

_no_ext_questions = ()

_EXT_ANSWERS = {
    'ru': [['Не знаю', '%s.%s:0']],
    'uk': [['Не знаю', '%s.%s:0']],
}

_PARAMS = {
    'ru': {
        '01' : ('Вербальная агрессия',    1, ([1, 2, 9, 10, 25, 26, 33], [17])),
        '02' : ('Физическая агрессия',    1, ([3, 4, 11, 18, 19, 28, 34], [27])),
        '03' : ('Предметная агрессия',    1, ([5, 12, 13, 21, 29, 35, 36], [20])),
        '04' : ('Эмоциональная агрессия', 1, ([6, 14, 15, 22, 30, 37, 38], [23])),
        '05' : ('Самоагрессия',           1, ([7, 8, 16, 24, 32, 39, 40], [31])),
    },
    'uk': {
        '01' : ('Вербальна агресія',      1, ([1, 2, 9, 10, 25, 26, 33], [17])),
        '02' : ('Фізична агресія',        1, ([3, 4, 11, 18, 19, 28, 34], [27])),
        '03' : ('Предметна агресія',      1, ([5, 12, 13, 21, 29, 35, 36], [20])),
        '04' : ('Емоційна агресія',       1, ([6, 14, 15, 22, 30, 37, 38], [23])),
        '05' : ('Самоагресія',            1, ([7, 8, 16, 24, 32, 39, 40], [31])),
    },
}

_RESULTS = {
    'ru' : {
        '01' : [
            (2, "Низкая степень агрессивности и высокая степень адаптированности"), 
            (4, "Средняя степень агрессивности и адаптированности"), 
            (8, "Высокая степень агрессивности и низкая степень адаптированности"), 
        ],
        '02' : [
            (2, "Низкая степень агрессивности и высокая степень адаптированности"), 
            (4, "Средняя степень агрессивности и адаптированности"), 
            (8, "Высокая степень агрессивности и низкая степень адаптированности"), 
        ],
        '03' : [
            (2, "Низкая степень агрессивности и высокая степень адаптированности"), 
            (4, "Средняя степень агрессивности и адаптированности"), 
            (8, "Высокая степень агрессивности и низкая степень адаптированности"), 
        ],
        '04' : [
            (2, "Низкая степень агрессивности и высокая степень адаптированности"), 
            (4, "Средняя степень агрессивности и адаптированности"), 
            (8, "Высокая степень агрессивности и низкая степень адаптированности"), 
        ],
        '05' : [
            (2, "Низкая степень агрессивности и высокая степень адаптированности"), 
            (4, "Средняя степень агрессивности и адаптированности"), 
            (8, "Высокая степень агрессивности и низкая степень адаптированности"), 
        ],
    },
    'uk' : {
        '01' : [(2, "Низький ступінь агресивності й високий ступінь адаптованості"), (4, "Середній ступінь агресивності й адаптованості"), (8, "Високий ступінь агресивності й низький ступінь адаптованості"), ],
        '02' : [(2, "Низький ступінь агресивності й високий ступінь адаптованості"), (4, "Середній ступінь агресивності й адаптованості"), (8, "Високий ступінь агресивності й низький ступінь адаптованості"), ],
        '03' : [(2, "Низький ступінь агресивності й високий ступінь адаптованості"), (4, "Середній ступінь агресивності й адаптованості"), (8, "Високий ступінь агресивності й низький ступінь адаптованості"), ],
        '04' : [(2, "Низький ступінь агресивності й високий ступінь адаптованості"), (4, "Середній ступінь агресивності й адаптованості"), (8, "Високий ступінь агресивності й низький ступінь адаптованості"), ],
        '05' : [(2, "Низький ступінь агресивності й високий ступінь адаптованості"), (4, "Середній ступінь агресивності й адаптованості"), (8, "Високий ступінь агресивності й низький ступінь адаптованості"), ],
    }
}

_CONCLUSIONS = {
    'ru' : {
        'F1' : ([(10, 'Низкая степень агрессивности и высокая степень адаптированности поведения'), 
                 (24, 'Средняя степень агрессивности и адаптированности поведения'), 
                 (40, 'Высокая степень агрессивности и низкая степень адаптированности поведения')
                ]),
    },
    'uk' : {
        'F1' : ([(10, 'Низький ступінь агресивності й високий ступінь адаптованості поведінки'), 
                 (24, 'Середній ступінь агресивності й адаптованості поведінки'), 
                 (40, 'Високий ступінь агресивності й низький ступінь адаптованості поведінки')
                ]),
    },
}

_HEADERS = {
    'ru': 
"""
Данный тест выявляет ваш обычный стиль поведения в стрессовых ситуациях и особенности приспособления в социальной среде. Вам необходимо ответить «да» или «нет» на нижеприведенные утверждения.
""",
    'uk': 
"""
Даний тест виявляє ваш звичний стиль поведінки в стресових ситуаціях і особливості пристосованності в соціальному середовищі. Вам необхідно відповісти «так» чи «ні» на наведені нижче твердження.
""",
}

_WARNINGS = {
    'ru': (
"""
Внимание, предоставленные данные выглядят недостоверными, рекомендуется быть более искренним в ответах или обратиться к специалисту!
""",
), 
    'uk': (
"""
Увага, надані відповіді видаються не надто достовірними; рекомендується бути більш щирим у відповідях або звернутися до фахівця!
""",
),
}

_FINISH = {
    'ru': (
"""
Завершение диалога.
""",
"""
Мы благодарим Вас за Ваши ответы.
Желаем Вам крепкого здоровья, и всего Вам доброго!
""",
), 
    'uk': (
"""
Завершення діалогу.
""",
"""
Ми дякуємо Вам за Ваші відповіді.
Бажаємо Вам міцного здоров'я, і всього Вам доброго!
""",
),
}

_results = {}


def test_name():
    return _TEST_NAME

def total_questions():
    return _QCOUNT

def get_question(i, lang, no_eof=None):
    x = _QUESTIONS[lang][i].strip()
    s = '%s.%s.' % (_TEST_NAME, x[-1] == '.' and x[:-1] or x)
    return no_eof and re.sub(r'\n', ' ', s) or s

def get_finish(storage, name, i, lang, no_eof=None):
    nic = storage.get(name, 'nic', with_decode=True)
    s = '%s%s' % (nic and '%s!\n\n' % nic or _FINISH[lang][0], _FINISH[lang][i].strip())
    return no_eof and re.sub(r'\n', ' ', s) or s

def get_result(storage, name, lang, mode=None):
    global _results

    res = ''

    data = storage.getall(name)
    params = _PARAMS[lang]
    results = _RESULTS[lang]
    conclusions = _CONCLUSIONS[lang]

    if mode == 1:
        keys = sorted([x for x in params.keys() if x[0].isdigit()])
    else:
        keys = sorted([x for x in params.keys() if x[0] in 'LF'])

    cs, px = {}, {}

    for p in keys:
        # p: ключ параметра: LF или 1...8
        x = 0
        for i in range(0, 2):
            # i=0: группа "Да"
            # i=1: группа "Нет"
            # score: баллы за ответ на вопрос
            score = 1
            for n in params[p][2][i]:
                # n: номер вопроса
                key = ('%s.%s' % (_TEST_NAME, n)).encode()
                v = int(data.get(key, 0))
                x += i == 0 and v > 0 and score or i == 1 and v < 0 and score or 0

        # param: наименование параметра
        param = params[p][0]
        # m: множитель параметра
        x = x * params[p][1]

        if mode == 1:
            _results[p] = [x, NO_KEY]

            px[p] = x
            c = ''
            for i, item in enumerate(results[p]):
                # item: граничное значение параметра
                if x <= item[0]:
                    # c: итоговая оценка по параметру
                    c = item[1]
                    _results[p][1] = c
                    if _with_group:
                        if i not in cs:
                            cs[i] = []
                        cs[i].append(p)
                    break
            # res: текст результата
            if not _with_group:
                res += '%s. %s: [%s] <b>%s</b>\n' % (p, param, x, c)
        else:
            if x > 5:
                return True

    if mode == 1:
        if _with_group:
            for i in cs:
                res += '<b>%s:</b>\n' % results[i][1]
                for p in cs[i]:
                    res += '    %s. %s: [%s]\n' % (p, params[p][0], px[p])

    res += ' * '*3+'\n'

    if not _is_without_conclusions:
        x = sum([_results[p][0] for p in keys])
    
        for conclusion in conclusions.keys():
            c = ''
            for i, item in enumerate(conclusion):
                # item: граничное значение параметра
                if x <= item[0]:
                    # c: итоговая оценка по параметру
                    c = item[1]
                    break
        
            _results[conclusion] = (x, c)
    
            # res: текст результата
            res += '[%s] <b>%s</b>\n' % (x, c)

    return res.strip()

def answer(bot, message, command, data=None, logger=None, question=None, **kw):
    """
        Make the step's answer
    """
    lang = kw.get('lang') or DEFAULT_LANGUAGE
    storage = kw.get('storage')
    name = kw.get('name')

    is_run = True

    if question == _QCOUNT or (IsDebug and question > 0 and question%10 == 0):
        result = get_result(storage, name, lang, mode=1)
        bot.send_message(message.chat.id, result, parse_mode=DEFAULT_PARSE_MODE)
        is_run = question < _QCOUNT

        if is_run:
            time.sleep(3)

    if question > _QCOUNT_EXT and 'query_id' in kw:
        if get_result(storage, name, lang, mode=2) and not storage.get(name, 'warning'):
            text = _WARNINGS[lang][0]

            bot.answer_callback_query(
                kw['query_id'],
                text=text,
                show_alert=True
                )

            storage.set(name, 'warning', 1)
            time.sleep(3)

    if is_run:
        answers = deepcopy(_ANSWERS[lang])
        if _with_extra:
            if question not in _no_ext_questions:
                answers += deepcopy(_EXT_ANSWERS[lang])
        for i, a in enumerate(answers):
            answers[i][1] = answers[i][1] % (_TEST_NAME, question+1)
        send_inline_keyboard(bot, message, answers, get_question(question, lang))

    elif 'query_id' in kw:
        _test_name = test_name()

        dbs.drop_before(_test_name, **kw)
        dbs.save_params(_test_name, _PARAMS, _results, **kw)

        if not _is_without_conclusions:
            dbs.save_conclusions(_test_name, _CONCLUSIONS, _results, **kw)
        """
        for p in sorted([x for x in _PARAMS[lang].keys()]):
            if p in _results:
                param = _PARAMS[lang][p][0]
                value, s1 = _results[p]
                storage.set(name, '%s.RP%s' % (_TEST_NAME, p), value)
                storage.set(name, '%s.TP%s' % (_TEST_NAME, p), '<i>%s</i>. %s:%s' % (param, s1, value), with_encode=True)

        if not _is_without_conclusions:
            conclusions = _CONCLUSIONS[lang]
            for conclusion in conclusions.keys():
                value, param = _results[conclusion]
                storage.set(name, '%s.RF' % _TEST_NAME, value)
                storage.set(name, '%s.TF%s' % (_TEST_NAME, conclusion), '%s:%s' % (param, value), with_encode=True)
        """
        if kw['query_id']:
            bot.answer_callback_query(
                kw['query_id'],
                text=get_finish(storage, name, 1, lang),
                show_alert=True
                )

            time.sleep(3)

        help(bot, message, logger=logger, mode=1, **kw)

## -------------------------- ##

def lines(text):
    for line in text.split('\n'):
        if not line:
            continue
        x = line.split('.')
        n, s = int(x[0].strip()), x[1].strip()
        print('"""\n%s. %s\n""",' % (n, s))

def results(text, is_debug=0):
    """
        '01' : [(1, ''), (8, ''), (11, ''),],
    """
    templates = ("%s'%02d' : [%s],", "(%s, \"%s\"), ")
    splitters = {'p' : ':', 'r' : chr(8211), 'b' : 'бал', 's' : '-'} #–
    p, items, res, n = '', [], [], 0

    for i, line in enumerate(text.split('\n')):
        if is_debug:
            print(line)
        if not line or len(line) == 0:
            continue
        s = line.strip()
        if len(s) == 0:
            continue
        if s.endswith(splitters['p']):
            if p:
                res.append(templates[0] % (' '*8, n, ''.join(items)))
                items = []
                p = ''
                if is_debug:
                    print('>>> param added')
            n += 1
            p = s[:-1]
            if is_debug:
                print('>>> new param:%s (%s)' % (n, p))
        elif splitters['r'] not in s:
            print(">>> param:%s (%s) no 'r' splitter in line %s" % (n, p, i))
        elif splitters['b'] not in s:
            print(">>> param:%s (%s) no 'b' splitter in line %s" % (n, p, i))
        else:
            try:
                caption = s.split(splitters['r'])[1]
                score = s.split(splitters['b'])[0]
                items.append(templates[1] % (
                    int(score.strip().split(splitters['s'])[1]),
                    re.sub(r'[\«\»]', '' , caption.strip()),
                    ))
            except:
                print(">>> param:%s (%s) raise" % (n, p))
                raise

    if p:
        res.append(templates[0] % (' '*8, n, ''.join(items)))

    print('-'*3)
    for r in filter(lambda x: len(x.strip()) > 0, res):
        print(r)
    print('\n')

def check(data, key, res):
    s = 0
    for k in data[key].keys():
        #print(k)
        q = k.split('.')[1]
        if not q.isdigit():
            continue
        #print(q)
        v = int(data[key][k])
        for i in range(0, 2):
            if int(q) in res[i]:
                s += i == 0 and v > 0 and 1 or i == 1 and v < 0 and 1 or 0
                break
    return s

def selftest(data, lang, with_print=None):
    key = _TEST_NAME
    params = dict([(k.split('.')[0], _PARAMS[lang][k]) for k in _PARAMS[lang].keys()])

    out = []
    r = {}
    for k in sorted(params.keys()):
        if not k in r:
            r[k] = 0
        x = check(data, key, params[k][2])
        if with_print:
            print(x)

        r[k] += x * params[k][1]

        rp = '%s.R%s' % (key, k)
        if rp in data[key]:
            x = int(data[key].get(rp, '0'))
            if r[k] == x:
                out.append('OK')
            else:
                out.append('Error %s [%s:%s]' % (rp, r[k], x))
        else:
            out.append(NO_RESULTS)

    is_ok, is_error = 1, 0
    for s in out:
        if s.startswith('OK'):
            pass
        elif s.startswith('Error'):
            is_ok = 0
            is_error = 1
            if with_print or IsWithPrintErrors:
                print(key, s)
            break
        else:
            is_ok = 0
            break

    return is_ok and 'OK' or is_error and 'Error' or NO_RESULTS
